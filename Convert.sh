#!/bin/bash

# $1 Full path to recording (%f) /home/user/Videos/News.mkv
# $2 Basename of recording (%b) News.mkv
# $3 Channel name (%c) BBC world
# $4 Who created this recording (%C) user
# $5 Program title (%t) News
# $6 Program description (%d) News and stories...
# $7 Error message (%e) Aborted by user
# $8 Start time stamp of recording, UNIX epoch (%S)
# $9 Stop time stamp of recording, UNIX epoch (%E)

#Change Paths below to suit your setup
OutputPath=/Path/To/Output/$5
Log=/home/Path/to/Log/ConvertLog.txt
XmlPath=/Path/to/mc2xml
#File Name and path without extension
BaseFileName=${1%.*}

echo "  " >> $Log
date >> $Log
echo "Input Path and File: " $1 >> $Log
echo "Channel: " $3 >> $Log
echo "Recording User: " $4 >> $Log
echo "Program title: " $5 >> $Log
echo "Program Description: " $6 >> $Log
echo "Error Message: " $7 >> $Log
echo "Input Start Time: " $8 >> $Log
echo "Input End Time: " $9 >> $Log
who = whoami
echo "Who Am I: " $who >> $Log

#Convert Unix time-stamp to YYYY-MM-DD.HH-MM-SS set to variable $t
t=$(perl -e "use POSIX qw(strftime); print POSIX::strftime('%Y%m%d%H%M%S', localtime($8))");
StartTimeLog=$(perl -e "use POSIX qw(strftime); print POSIX::strftime('%Y-%m-%d.%H-%M-%S', localtime($8))");
echo "Readable Start Time: " $StartTimeLog >> $Log
echo "Converted Start Time: " $t >> $Log

#query original air date from xmltv.xml (Generated by MC2XML)
AirDate=$(xmllint --xpath "string(/tv/programme[title=\"$5\" and desc=\"$6\" and contains(@start, \"$t\")]/previously-shown/@start)" $XmlPath/xmltv.xml);
echo "AirDate Query:  xmllint --xpath 'string(/tv/programme[title=\"'"$5"'\" and desc=\"'"$6"'\" and contains(@start, \"'"$t"'\")]/previously-shown/@start)' $XmlPath/xmltv.xml" >> $Log
echo "AirDate: " $AirDate >> $Log
#Trim whitespace from Air Date Converted
AirDate = "$AirDate" | tr -d ' '

#Set Handbrake Input File
echo "HandBrake Input File: " $1 >> $Log
#Set Handbrake Output File
HandBrakeOutput="$BaseFileName.mp4"

#Transcode to h264 file.
echo "HandBrake Output Path: " $HandBrakeOutput >> $Log
sudo HandBrakeCLI -i "$1" -o "$HandBrakeOutput" -e x264 --x264-preset ultrafast --x264-profile high --vfr -q 20 -X 720 -a 1,2,3 -E copy --audio-fallback mp3 -5
echo "HandBrake Exit Code: " $? >> $Log

#flag for commercials
echo "***Comercial Flagging***" >> $Log
echo "comskip" $1 >> $Log
comskip "$1" # 2>&1 </dev/null  >> $Log
echo "comskip Exit code: " $? >> $Log
echo "***End Commercial Flagging***" >> $Log

#Set edl File Name
EdlFile="$BaseFileName.edl"

#allow time for edl to write.
sleep 5

echo "EDL File Name Used:" $EdlFile >> $Log
#Check if edl file was generated by comskip.
if [ -f "$EdlFile" ];
then
	#Cut Commercials
	echo "***Comercial Cutting***" >> $Log
	CommercialCutFile="$BaseFileName.m4v"
	sudo mencoder "$HandBrakeOutput" -edl "$EdlFile" -oac mp3lame -ovc copy -of avi -o "$CommercialCutFile" 
	echo "Commercial Output File: " $CommercialCutFile >> $Log
	echo "mencoder exit code: " $? >> $Log
	echo "***End Comercial Cutting***" >> $Log
	FileToMove="$CommercialCutFile"
else
	echo "Commercials not cut!" >> $Log
	FileToMove="$HandBrakeOutput"
fi

if [[ -z "$AirDate" ]];
then
echo "Start Time of recording used in name" >> $Log
	#Convert Start Date of Recording for Plex/Kodi(XBMC) Naming convention.
	t=$(perl -e "use POSIX qw(strftime); print POSIX::strftime('%Y-%m-%d', localtime($8))");
	#Set Output File
	OutputName="$5.$t.MP4"
else
	echo "Previously Aired date from xmltv.xml used in name" >> $Log
	#Convert AirDate to date format for Plex/Kodi(XBMC) Naming convention.
	AirDateConverted=$(echo ${AirDate:0:4}-${AirDate:4:2}-${AirDate:6:2});
	#Set Output File
	OutputName="$5.$AirDateConverted.MP4"
fi

echo "Checking for Output Folder: " $OutputPath >> $Log
#Check if folder exists
if [ ! -d "$OutputPath" ];
then
echo "Output Folder Created: " $OutputPath >> $Log
	#if not make new folder
	mkdir "$OutputPath"
fi
#move transcoded file to Output
mv "$FileToMove" "$OutputPath/$OutputName"


#delete files after transcoding.
if [ -f "$BaseFileName".mp4 ];
then
	rm -f "$BaseFileName".mp4
fi

#if [ -f "$BaseFileName".edl ];
#then
#	rm -f "$BaseFileName".edl
#fi

if [ -f "$BaseFileName".log ];
then
	rm -f "$BaseFileName".log
fi

if [ -f "$BaseFileName".txt ];
then
	rm -f "$BaseFileName".txt
fi

if [ -f "$BaseFileName".logo.txt ];
then
	rm -f "$BaseFileName".logo.txt
fi

if [ -f "$BaseFileName".m4v ];
then
	rm -f "$BaseFileName".m4v
fi
